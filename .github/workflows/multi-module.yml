name: IoT Application Multi-Module IAC Workflow

on:
  workflow_dispatch:
    inputs:
      module:
        description: 'Select the IaC module to deploy [vpc, connect, roles, ecr, ec2, iot, api_gateway]'
        required: true
        type: string
      environment:
        description: 'Select the environment [dev, test, prod]'
        required: true
        default: 'dev'
        type: string

env:
  TF_CLOUD_ORGANIZATION: "1220-IAC"
  CONFIG_DIRECTORY: "./"

jobs:
  Deploy_Resources:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Configure Terraform Cloud API Token
      run: |
        mkdir -p ~/.terraform.d
        echo '{"credentials": {"app.terraform.io": {"token": "${{ secrets.TFE_TOKEN }}"}}}' > ~/.terraform.d/credentials.tfrc.json

    - name: Set Module Path
      id: set-path
      run: |
        case "${{ github.event.inputs.module }}" in
        vpc) echo "module_path=modules/vpc" >> $GITHUB_ENV ;;
        connect) echo "module_path=modules/connect" >> $GITHUB_ENV ;;
        roles) echo "module_path=modules/roles" >> $GITHUB_ENV ;;
        ecr) echo "module_path=modules/ecr" >> $GITHUB_ENV ;;
        ec2) echo "module_path=modules/ec2" >> $GITHUB_ENV ;;
        iot) echo "module_path=modules/iot" >> $GITHUB_ENV ;;
        api_gateway) echo "module_path=modules/api_gateway" >> $GITHUB_ENV ;;
        *) echo "Invalid module selected"; exit 1 ;;
        esac

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.module_path }}

    - name: Terraform Apply
      run: |
        terraform apply -auto-approve \
          -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
      working-directory: ${{ env.module_path }}